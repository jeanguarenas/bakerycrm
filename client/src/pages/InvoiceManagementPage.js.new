import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Link } from 'react-router-dom';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { toast } from 'react-toastify';

// Componente para la gestión de pedidos y facturación usando un tablero Kanban
const InvoiceManagementPage = () => {
  // Estilo global para evitar problemas de scroll anidados
  React.useEffect(() => {
    const style = document.createElement('style');
    style.textContent = `
      .kanban-items {
        overflow: visible !important;
      }
      .kanban-board {
        min-height: 600px;
      }
    `;
    document.head.appendChild(style);
    
    return () => {
      document.head.removeChild(style);
    };
  }, []);

  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Estados para el kanban - Estructura simplificada para mayor estabilidad
  const [columns, setColumns] = useState({
    remito: {
      id: 'remito',
      title: 'Remito',
      items: []
    },
    remito_finalizado: {
      id: 'remito_finalizado',
      title: 'Remitos Finalizados',
      items: []
    },
    factura_pendiente: {
      id: 'factura_pendiente',
      title: 'Factura Pendiente',
      items: []
    },
    factura_cobrada: {
      id: 'factura_cobrada',
      title: 'Factura Cobrada',
      items: []
    },
    pedido_completo: {
      id: 'pedido_completo',
      title: 'Pedido Completo',
      items: []
    }
  });
  
  // Arreglo estable de IDs de columnas para asegurar que nunca cambie el orden
  const columnOrder = ['remito', 'remito_finalizado', 'factura_pendiente', 'factura_cobrada', 'pedido_completo'];

  // Cargar pedidos al inicio
  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const response = await fetch('/api/orders');
        if (!response.ok) {
          throw new Error('Error al cargar los pedidos');
        }
        
        const data = await response.json();
        
        // Inicializar nuevo objeto de columnas
        const newColumns = JSON.parse(JSON.stringify(columns));
        
        // Resetear las listas de items
        Object.keys(newColumns).forEach(key => {
          newColumns[key].items = [];
        });
        
        // Distribuir los pedidos en las columnas según su estado
        data.forEach(order => {
          const columnId = order.invoiceStatus || 'remito';
          if (newColumns[columnId]) {
            newColumns[columnId].items.push({
              ...order,
              id: order._id // Asegurar que tiene un id único para react-beautiful-dnd
            });
          }
        });
        
        setColumns(newColumns);
        setOrders(data);
        setLoading(false);
      } catch (err) {
        console.error('Error fetching orders:', err);
        setError(err.message);
        setLoading(false);
      }
    };

    fetchOrders();
  }, []);

  // Manejar el evento de finalización de arrastre
  const onDragEnd = useCallback(async (result) => {
    const { source, destination, draggableId } = result;
    
    // Si no hay destino (se soltó fuera de un droppable), no hacer nada
    if (!destination) {
      return;
    }
    
    // Si el origen y destino son el mismo y el índice es el mismo, no hacer nada
    if (
      source.droppableId === destination.droppableId &&
      source.index === destination.index
    ) {
      return;
    }
    
    try {
      // Crear una copia de las columnas actuales
      const newColumns = JSON.parse(JSON.stringify(columns));
      
      // Obtener las columnas de origen y destino
      const sourceColumn = newColumns[source.droppableId];
      const destColumn = newColumns[destination.droppableId];
      
      // Obtener el pedido que se está moviendo
      const [removedOrder] = sourceColumn.items.splice(source.index, 1);
      
      // Si se mueve dentro de la misma columna
      if (source.droppableId === destination.droppableId) {
        // Solo reordenar
        sourceColumn.items.splice(destination.index, 0, removedOrder);
      } 
      // Si se mueve a otra columna
      else {
        // Actualizar el estado del pedido
        const updatedOrder = {
          ...removedOrder,
          invoiceStatus: destination.droppableId
        };
        
        // Insertar en la columna de destino
        destColumn.items.splice(destination.index, 0, updatedOrder);
        
        // Actualizar en la base de datos
        try {
          const response = await fetch(`/api/orders/${removedOrder._id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              invoiceStatus: destination.droppableId
            })
          });
          
          if (!response.ok) {
            const errorData = await response.text();
            throw new Error(`Error al actualizar: ${response.status} - ${errorData}`);
          }
          
          toast.success('Pedido actualizado correctamente');
        } catch (error) {
          console.error('Error updating order:', error);
          toast.error(`Error: ${error.message}`);
          
          // No actualizamos el estado en caso de error
          return;
        }
      }
      
      // Actualizar el estado
      setColumns(newColumns);
    } catch (error) {
      console.error('Error in drag and drop:', error);
      toast.error('Error al mover el pedido');
      setError('Error al mover el elemento: ' + error.message);
    }
  }, [columns]);

  // Formato de fecha para mostrar en las tarjetas
  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'short', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('es-ES', options);
  };

  if (loading) return <div className="spinner-border text-primary" role="status"></div>;
  if (error) return <div className="alert alert-danger">{error}</div>;

  return (
    <div className="container-fluid p-4">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2>Gestión de Pedidos y Facturación</h2>
        <Link to="/orders/new" className="btn btn-primary">Nuevo Pedido</Link>
      </div>

      <DragDropContext onDragEnd={onDragEnd}>
        <div className="kanban-board d-flex" style={{ overflowX: 'auto', overflowY: 'hidden', padding: '10px 0' }}>
          {columnOrder.map(columnId => {
            const column = columns[columnId];
            return (
              <div className="kanban-column mx-2" key={columnId} style={{ width: '300px', flexShrink: 0 }}>
                <h5 className="p-2 bg-light border rounded-top text-center fw-bold">{column.title}</h5>
                <Droppable droppableId={columnId} type="ORDER" direction="vertical">
                  {(provided) => (
                    <div
                      className="kanban-items p-2 border border-top-0 bg-light rounded-bottom"
                      style={{ 
                        height: '550px',
                        backgroundColor: '#f8f9fa',
                        display: 'flex',
                        flexDirection: 'column',
                        overflowY: 'auto'
                      }}
                      {...provided.droppableProps}
                      ref={provided.innerRef}
                    >
                      {column.items.map((order, index) => (
                        <Draggable 
                          key={order._id} 
                          draggableId={order._id}
                          index={index}
                        >
                          {(provided, snapshot) => (
                            <div
                              className="card mb-2 shadow-sm"
                              ref={provided.innerRef}
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                              style={{
                                ...provided.draggableProps.style,
                                userSelect: 'none',
                                width: '100%',
                                margin: '0 0 12px 0',
                                backgroundColor: snapshot.isDragging ? '#e9f5ff' : 'white',
                                cursor: 'grab',
                                border: snapshot.isDragging ? '2px solid #007bff' : '1px solid #dee2e6',
                                boxShadow: snapshot.isDragging ? '0 5px 15px rgba(0,123,255,0.3)' : '0 2px 5px rgba(0,0,0,0.05)',
                                borderRadius: '6px',
                                transition: 'none'
                              }}
                            >
                              <div className="card-body">
                                <h6 className="card-title">
                                  Pedido #{order._id.substring(order._id.length - 5)}
                                </h6>
                                <p className="card-text">
                                  <strong>Cliente:</strong> {order.customer?.name || 'Cliente'}
                                </p>
                                <p className="card-text">
                                  <strong>Total:</strong> ${order.total ? order.total.toFixed(2) : '0.00'}
                                </p>
                                <p className="card-text">
                                  <strong>Fecha:</strong> {order.createdAt ? formatDate(order.createdAt) : 'Sin fecha'}
                                </p>
                                <div className="d-flex justify-content-between">
                                  <span 
                                    className={`badge ${order.status === 'completed' ? 'bg-success' : 
                                      order.status === 'pending' ? 'bg-warning' : 'bg-danger'}`}
                                  >
                                    {order.status === 'completed' ? 'Completado' : 
                                      order.status === 'pending' ? 'Pendiente' : 'Cancelado'}
                                  </span>
                                  <Link to={`/orders/${order._id}`} className="btn btn-sm btn-outline-primary">
                                    Ver
                                  </Link>
                                </div>
                              </div>
                            </div>
                          )}
                        </Draggable>
                      ))}
                      {provided.placeholder}
                    </div>
                  )}
                </Droppable>
              </div>
            );
          })}
        </div>
      </DragDropContext>
    </div>
  );
};

export default InvoiceManagementPage;
